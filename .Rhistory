nrow(as.data.frame(pieces[2]))*(1-0.02)
nrow(as.data.frame(pieces[2]))*(1-0.2)
10000/50000
nrow(as.data.frame(pieces[2]))*(0.8)
nrow(as.data.frame(pieces[2]))*(0.75)
nrow(as.data.frame(pieces[2]))*(0.85)
s10$rand <- ifelse(s10$s10==2,0.85,1)
pieces <- split(s10,s10$rand)
pieces <- lapply(pieces,function(x) x[sample(nrow(x),size=mean(x$rand)*nrow(x),replace=F),])
s10 <- do.call("rbind",pieces )
prop.table(table(s10$s10))
prop.table(table(s10$s10)*100)
prop.table(table(s10$s10))*100
table(s10$s10)
s10 <- pool_md[-313]
s10$rand <- ifelse(s10$s10==2,0.75,1)
pieces <- split(s10,s10$rand)
pieces <- lapply(pieces,function(x) x[sample(nrow(x),size=mean(x$rand)*nrow(x),replace=F),])
s10 <- do.call("rbind",pieces )
table(s10$s10)
s10$rand <- NULL
s10$s10_neu<-recode(s10$s10,"0=NA;1=0;2=1;3=2;4=3;5=4")
library(car)
s10$s10_neu<-recode(s10$s10,"0=NA;1=0;2=1;3=2;4=3;5=4")
table(s10$s10_neu)
prop.table(table(s10$s10_neu))*100
s10$rand <- ifelse(s10$s10==2,0.70,1)
s10 <- pool_md[-313]
s12 <- pool_md[-312]
s10$rand <- ifelse(s10$s10==2,0.70,1)
pieces <- split(s10,s10$rand)
pieces <- lapply(pieces,function(x) x[sample(nrow(x),size=mean(x$rand)*nrow(x),replace=F),])
#merging the results in a dataframe
s10 <- do.call("rbind",pieces )
s10$rand <- NULL
library(car)
#recode s10_neu (0=sysmis) (1=0) (2=1) (3=2) (4=3) (5=4)
s10$s10_neu<-recode(s10$s10,"0=NA;1=0;2=1;3=2;4=3;5=4")
prop.table(table(s10$s10_neu))*100
s10$rand <- runif(n=nrow(s10))
library(plyr)
s10 <. s10[order(s10$rand),]
s10 <- s10[order(s10$rand),]
View(`s10`)
fix(s10)
s10$rand <- NULL
names(s10)
write.table(d_pool,file="//filer001.office.nugg.ad/Data/statistik/model/_D/_pool/sample/20140401/s10.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
table(s12$s12)
S12$s12_kk<-recode(s12$s12,"0=NA;1:2=1;3:4=2;5:6=3;7:8=4;9:11=5;12=0")
s12$s12_kk<-recode(s12$s12,"0=NA;1:2=1;3:4=2;5:6=3;7:8=4;9:11=5;12=0")
table(s12$s12_kk)
s12$s12_kk<-recode(s12$s12,"0=999;1:2=1;3:4=2;5:6=3;7:8=4;9:11=5;12=0")
table(s12$s12_kk)
pieces <- split(s12,s12$s12_kk)
pieces <- lapply(pieces,function(x) x[sample(nrow(x),size=5754,replace=F),]) #taking a random sample
s12 <- do.call("rbind",pieces )
s12$rand <- runif(n=nrow(s12))
s12 <- s12[order(s12$rand),]
s12$rand <- NULL
write.table(s10,file="//filer001.office.nugg.ad/Data/statistik/model/_D/_pool/sample/20140401/s10.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
table(s12$s12_kk)
table(s12$s12_kk,useNA="ifany")
s12$s12_kk <- recode(s12$s12_kk,"999=NA")
table(s12$s12_kk,useNA="ifany")
write.table(s12,file="//filer001.office.nugg.ad/Data/statistik/model/_D/_pool/sample/20140401/s12.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
fix(s12#)
fix(s12$s12_kk)
fix(s12)
s12$s12_kk
as.matrix(s12$s12_kk)
s10 <- pool_md[-313]
#recode s10_neu (0=sysmis) (1=0) (2=1) (3=2) (4=3) (5=4)
s10$s10_neu<-recode(s10$s10,"0=NA;1=0;2=1;3=2;4=3;5=4")
table(s10$s10_neu)
s10$rand <- ifelse(s10$s10_neu==1,0.75,1)  #removing 30% of cases from S10 = 2
table(s10$rand)
pieces <- split(s10,s10$rand)
pieces <- lapply(pieces,function(x) x[sample(nrow(x),size=mean(x$rand)*nrow(x),replace=F),]) #taking a random sample
s10 <- do.call("rbind",pieces )
table(s10$s10_neu)
prop.table(table(s10$s10_neu))
table(s12$s12_kk)
177654511%%16
805450299%%16
1629972935%%16
2078540332%%16
2137767787%%16
2134566534%%11
2134566534%%16
rm(list=ls())
ch_pool <- read.delim("//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/raw/-user-sgarg-poolch_20140404-normalized.csv",header=T,sep="\t",check.names=F)
names(ch_pool)
names(ch_pool) <- gsub("-",".",names(ch_pool))
names(ch_pool)#
ch_pool <- ch_pool[!is.na(ch_pool$s4n),,drop=F]
ch_pool <- ch_pool[ch_pool$s4n!=99,]
table(ch_pool$network.id)
#recoding NAs to 0 & creating new child variables
ch_pool$s5<-recode(ch_pool$s5,"NA=0")
ch_pool$baby<-recode(var=ch_pool$s6_1,recodes="2=1;1=0;0=NA")
ch_pool$pupil<-recode(var=ch_pool$s6_2,recodes="2=1;1=0;0=NA")
ch_pool$youth<-recode(var=ch_pool$s6_3,recodes="2=1;1=0;0=NA")
#creating the variable hh which is sum of children in HH + 1
hhfun<-function(x,y,z){
res<-sum(x,y,z,1,na.rm=T)
ifelse(is.na(x)&is.na(y)&is.na(z),0,res)
}
ch_pool$hh<-mapply(hhfun,ch_pool$baby,ch_pool$pupil,ch_pool$youth)  #creating hh as a sum of baby,pupil & youth +1
library(dplyr)
nrow(filter(ch_pool,s5>0,hh>s5))
ch_pool$hh<-mapply(hhfun,ch_pool$baby,ch_pool$pupil,ch_pool$youth)  #creating hh as a sum of baby,pupil & youth +1
library(car)
#recoding NAs to 0 & creating new child variables
ch_pool$s5<-recode(ch_pool$s5,"NA=0")
ch_pool$baby<-recode(var=ch_pool$s6_1,recodes="2=1;1=0;0=NA")
ch_pool$pupil<-recode(var=ch_pool$s6_2,recodes="2=1;1=0;0=NA")
ch_pool$youth<-recode(var=ch_pool$s6_3,recodes="2=1;1=0;0=NA")
#creating the variable hh which is sum of children in HH + 1
hhfun<-function(x,y,z){
res<-sum(x,y,z,1,na.rm=T)
ifelse(is.na(x)&is.na(y)&is.na(z),0,res)
}
ch_pool$hh <- mapply(hhfun,ch_pool$baby,ch_pool$pupil,ch_pool$youth)  #creating hh as a sum of baby,pupil & youth +1
#cases where calculated hhh is greater than given s5, put it as 0
library(dplyr)
nrow(filter(ch_pool,s5>0,hh>s5))
ch_pool$s5[ch_pool$s5 > 0 & ch_pool$hh > ch_pool$s5]<-0
ch_pool$s6_1[ch_pool$s5==1]<-1
ch_pool$s6_2[ch_pool$s5==1]<-1
ch_pool$s6_3[ch_pool$s5==1]<-1
table(ch_pool$s6_1)
ch_pool$s7<-recode(ch_pool$s7,"NA=0")
ch_pool$s8<-recode(ch_pool$s8,"NA=0")
#replacing s7 as 1 for cases where & HH Größe=1
ch_pool$s7[ch_pool$s5==1]<-1
table(ch_pool$s4n[ch_pool$s7==1])
#removing the cases where HEK is ja & age<18 years
ch_pool<-ch_pool[!(ch_pool$s7==1 & ch_pool$s4n<18),]
#checking for cases where Haushaltsführung=2 & HH Größe=1
table(ch_pool$s8,ch_pool$s5,useNA="ifany")
#forcing NAs in s8 with s5=1 to 1
ch_pool$s8[ch_pool$s5==1]<-1
#checking for cases where Haushaltsführung=1 & age<18
table(ch_pool$s8[ch_pool$s4n<18],useNA="ifany")
#removing the cases where Haushaltsführung is 1 & age<18 years
ch_pool<-ch_pool[!(ch_pool$s8==1 & ch_pool$s4n<18),]
ch_pool$s9<-recode(ch_pool$s9,"NA=0")
ch_pool$s10<-recode(ch_pool$s10,"NA=0")
table(ch_pool$s9[ch_pool$s4n<18],useNA="ifany")
#removing people younger than 18 and with Higher Education s9 = 4
ch_pool<-ch_pool[!(ch_pool$s4n<18 & ch_pool$s9==4),]
table(ch_pool$s10[ch_pool$s4n>40],useNA="ifany")
#removing the cases where person is a student & age>40 years
ch_pool<-ch_pool[!(ch_pool$s10==1 & ch_pool$s4n>40),]
table(ch_pool$s10[ch_pool$s4n<50],useNA="ifany")
#removing the cases where s10=4 i.e rentner & age<50 years
ch_pool<-ch_pool[!(ch_pool$s10==4 & ch_pool$s4n<50),]
table(ch_pool$s12[ch_pool$s4n<18],useNA="ifany")
table(ch_pool$s12)
ch_pool<-subset(ch_pool,!(s12%in%c(5:10)&s4n<18))
ch_pool$s13<-recode(ch_pool$s13,"NA=0")
ch_pool$s12<-recode(ch_pool$s12,"NA=0")
table(ch_pool$s13)
nrow(subset(ch_pool,s12==11 & s13 == 11))
ch_pool <- ch_pool[!(ch_pool$s12 == 11 & ch_pool$s13 == 11),]
ch_pool$s13[ch_pool$s13>0 & ch_pool$s13 < ch_pool$s12 & ch_pool$s12<11]<-ch_pool$s12[ch_pool$s13>0 & ch_pool$s13 < ch_pool$s12 & ch_pool$s12<11]
ch_pool$p3_1<-recode(ch_pool$p3_1,"NA=0")
ch_pool$p3_2<-recode(ch_pool$p3_2,"NA=0")
ch_pool$p3_3<-recode(ch_pool$p3_3,"NA=0")
ch_pool$p3_4<-recode(ch_pool$p3_4,"NA=0")
ch_pool$p3_5<-recode(ch_pool$p3_5,"NA=0")
ch_pool$p3_6<-recode(ch_pool$p3_6,"NA=0")
ch_pool$p4_1<-recode(ch_pool$p4_1,"NA=0")
ch_pool$p4_2<-recode(ch_pool$p4_2,"NA=0")
ch_pool$p4_3<-recode(ch_pool$p4_3,"NA=0")
ch_pool$p4_4<-recode(ch_pool$p4_4,"NA=0")
ch_pool$p4_5<-recode(ch_pool$p4_5,"NA=0")
ch_pool$p4_6<-recode(ch_pool$p4_6,"NA=0")
ch_pool$p4_7<-recode(ch_pool$p4_7,"NA=0")
ch_pool$p4_8<-recode(ch_pool$p4_8,"NA=0")
ch_pool$p4_9<-recode(ch_pool$p4_9,"NA=0")
#removing cases where P3 & P4 variables are all equal
ch_pool<-ch_pool[!(ch_pool$p3_1==ch_pool$p3_2 & ch_pool$p3_1==ch_pool$p3_3 & ch_pool$p3_1==ch_pool$p3_4 & ch_pool$p3_1==ch_pool$p3_5 & ch_pool$p3_1==ch_pool$p3_6 & ch_pool$p3_1>0),]
ch_pool<-ch_pool[!(ch_pool$p4_1==ch_pool$p4_2 & ch_pool$p4_1==ch_pool$p4_3 & ch_pool$p4_1==ch_pool$p4_4 & ch_pool$p4_1==ch_pool$p4_5 & ch_pool$p4_1==ch_pool$p4_6 & ch_pool$p4_1==ch_pool$p4_7 & ch_pool$p4_1==ch_pool$p4_8 &ch_pool$p4_1==ch_pool$p4_9 & ch_pool$p4_1>0),]
###some cleaning
ch_pool<-subset(ch_pool,select=-c(baby,pupil,youth,hh))  #removing previously computed extra variables "baby", "pupil
names(ch_pool)
#counting the number of NAs and Null
ch_pool$na.count<-apply(ch_pool[6:88],1,function(x) {
na=sum(is.na(x))
nulls=sum(x==0,na.rm=T)
return(na+nulls)
})
frq_fun<-function(x){
tablex<-as.data.frame(table(x))
tablex
}
#getting the frequencies for user-id and replacing them as a variable in the dataset
frq_user<-frq_fun(ch_pool$user.id) #gives the user ids and corresponding frequencies
names(frq_user)<-c("user","Freq")
ch_pool$Freq<-apply(as.matrix(match(ch_pool$user.id,frq_user$user)),c(1,2),function(x) frq_user$Freq[x]) #matches the users id in original dataset to respective freq calculated in the above step
require(plyr)
d_minima<-ddply(ch_pool,.(user.id),summarise,minima=min(na.count))
ch_pool$minima <- apply(as.matrix(match(ch_pool$user.id,d_minima$user)),c(1,2),function(x) d_minima$minima[x])
ch_pool$test1 <- ch_pool$na.count-ch_pool$minima
ch_pool <- ch_pool[ch_pool$test1==0,]
ch_pool <- ch_pool[!duplicated(ch_pool$user.id),]
#some cleaning
rm(list=c("d_minima","frq_fun","frq_user","hhfun"))
ch_pool <- subset(ch_pool,select=-c(na.count,Freq,minima,test1))
write.table(ch_pool,"//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/intermediate samples/ch_pool_filtered.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
table(ch_pool$network.id)
setwd("Survey Overview/")
x <- 5:8  ## give the week subscripts
y <- paste0("week_",x) ## creating the week vector
inputs <- vector("list",4)  #empty list for the loop
##adding the week stamp in each data set
for( i in seq_along(x)) {
inputs[[i]] <- read.delim(paste0("clicks_",x[i],".csv"),header=T, sep="\t")
inputs[[i]] <- cbind(inputs[[i]], week = rep(y[i],nrow(inputs[[i]])))
}
results <- do.call("rbind",inputs) ##putting together the results
require(dplyr)
grouped <- group_by(results,week,net.id)
grouped <- group_by(results,net.id)
agg_traffic <- summarise(grouped,traffic = sum(pi)))
agg_traffic <- summarise(grouped,traffic = sum(pi))
grouped <- group_by(results,net.id)
names(grouped)
agg_traffic <- summarise(grouped,traffic = sum(uc))
agg_traffic <- summarise(grouped,traffic = sum(as.numeric(uc)))
grouped <- group_by(results,net.id)
agg_traffic <- summarise(grouped,traffic = sum(as.numeric(uc)))
require(dplyr)
grouped <- group_by(results,net.id)
agg_traffic <- summarise(grouped,traffic = sum(as.numeric(uc)))
View(agg_traffic)
require(plyr)
sums <- ddply(results,.(net.id),traffic = sum(uc))
sums <- ddply(results,.(net.id),summarise,traffic = sum(uc))
View(sums)
sums <- ddply(results,.(net.id),summarise,traffic = sum(uc)/4)
sums <- filter(sums,net.id%in%c(805450299,1629972935,2078540332,2137767787))
sums
rm(inputs)
rm(x)
rm(y)
rm(i)
rm(sums)
rm(agg_traffic)
rm(grouped)
rm(results)
pieces <- split(ch_pool,ch_pool$network.id)
table(ch_pool$network.id)
rm(pieces)
pieces <- split(ch_pool,ch_pool$network.id)
pieces[[1]]
pieces[[1]]$network.id[1]
pieces[[2]]$network.id[1]
pieces[[3]]$network.id[1]
str(pieces[[3]])
pieces[[3]] <- sample(pieces[[3]],size=1500,replace=F)
pieces[[3]] <- pieces[sample(1:nrow(pieces[[3]]),size=1500,replace=F),]
nrow(pieces[[3]])
pieces[[3]] <- pieces[[3]][sample(1:nrow(pieces[[3]]),size=1500,replace=F),]
ch_pool <- do.call("rbind",pieces )
namy <- names(ch_pool)
tableu <- function(x){
table(x,useNA="ifany")
}
mapply(tableu,ch_pool[6:88])
require(car)
ch_pool$k1_11 <- recode(ch_pool$k1_11,"0=NA;1=0;2=1")
ch_pool$k2_24 <- recode(ch_pool$k2_24,"1=0;2=1")
ch_pool$k2_25 <- recode(ch_pool$k2_25,"1=0;2=1")
#recoding the p1 variables
ch_pool[,namy[grep("p1",namy)]] <- apply(ch_pool[,namy[grep("p1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p2 variables
ch_pool[,namy[grep("p2",namy)]] <- apply(ch_pool[,namy[grep("p2",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p3 variables
ch_pool[,namy[grep("p3",namy)]] <- apply(ch_pool[,namy[grep("p3",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding the p4 variables
ch_pool[,namy[grep("p4",namy)]] <- apply(ch_pool[,namy[grep("p4",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding s3
ch_pool$s3  <-  recode(ch_pool$s3,"0=NA;1=0;2=1")
#recode s4n to s4n_kk
ch_pool$s4n_kk <- recode(ch_pool$s4n,"14:19=0;20:29=1;30:39=2;40:49=3;50:59=4;60:98=5")
#recode s4n to s4n_kkv
ch_pool$s4n_kkv <- recode(ch_pool$s4n,"14:17=0;18:19=1;19:hi=NA")
#recode s5
ch_pool$s5_kk <- recode(ch_pool$s5,"0=NA;1=0;2=1;3=2;4=3;5:hi=4")
#recode s6 variables
ch_pool[,namy[grep("s6",namy)]] <- apply(ch_pool[,namy[grep("s6",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1"))
#recode s7
ch_pool$s7 <- recode(ch_pool$s7,"0=NA;1=0;2=1")
#recode s8
ch_pool$s8 <- recode(ch_pool$s8,"0=NA;1=0;2=1")
ch_pool$s9_kk <- recode(ch_pool$s9,"0=NA;1=0;2=1;3:6=2;7=3")
tableu(ch_pool$s10)
ch_pool$s10  <-  recode(ch_pool$s10,"0=NA;1=0;2:3=1;4=2;5=3")
tableu(ch_pool$s10)
tableu(ch_pool$s12)
ch_pool$s12_kk  <-  recode(ch_pool$s12,"0=NA;1=1;2:3=2;4:6=3;7:9=4;10=5;11=0")
tableu(ch_pool$s13)
ch_pool$s13_kk  <-  recode(ch_pool$s13,"0=NA;1=0;2:4=1;5:8=2;9:12=3;13=4")
mapply(tableu,ch_pool[,namy[grep("cm3",namy)]])
prop.table(mapply(tableu,ch_pool[,namy[grep("cm3",namy)]]))
addmargins(mapply(tableu,ch_pool[,namy[grep("cm3",namy)]]))
addmargins(mapply(table,ch_pool[,namy[grep("cm3",namy)]]))
addmargins(mapply(table,ch_pool[,namy[grep("cm1",namy)]]))
addmargins(mapply(table,ch_pool[,namy[grep("cm2",namy)]]))
tableu(ch_pool$cm2)
mapply(tableu,ch_pool[,namy[grep("cm3",namy)]])
ch_pool[,namy[grep("cm1",namy)]]  <-  apply(ch_pool[,namy[grep("cm1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
ch_pool$cm2  <-  recode(ch_pool$cm2,"0=NA;1:2=0;3:4=1")
ch_pool$cm1_1
tableu(ch_pool$cm1_1)
ch_pool$cm2  <-  recode(ch_pool$cm2,"0=NA;1:2=0;3:4=1")
tableu(ch_pool$cm2)
tableu(ch_pool$cm2)
ch_pool  <-  read.delim("//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/intermediate samples/ch_pool_filtered.csv",header=T,sep="\t",check.names=F)
namy <- names(ch_pool)
require(car)
ch_pool$k1_11 <- recode(ch_pool$k1_11,"0=NA;1=0;2=1")
ch_pool$k2_24 <- recode(ch_pool$k2_24,"1=0;2=1")
ch_pool$k2_25 <- recode(ch_pool$k2_25,"1=0;2=1")
#recoding the p1 variables
ch_pool[,namy[grep("p1",namy)]] <- apply(ch_pool[,namy[grep("p1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p2 variables
ch_pool[,namy[grep("p2",namy)]] <- apply(ch_pool[,namy[grep("p2",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p3 variables
ch_pool[,namy[grep("p3",namy)]] <- apply(ch_pool[,namy[grep("p3",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding the p4 variables
ch_pool[,namy[grep("p4",namy)]] <- apply(ch_pool[,namy[grep("p4",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding s3
ch_pool$s3  <-  recode(ch_pool$s3,"0=NA;1=0;2=1")
#recode s4n to s4n_kk
ch_pool$s4n_kk <- recode(ch_pool$s4n,"14:19=0;20:29=1;30:39=2;40:49=3;50:59=4;60:98=5")
#recode s4n to s4n_kkv
ch_pool$s4n_kkv <- recode(ch_pool$s4n,"14:17=0;18:19=1;19:hi=NA")
#recode s5
ch_pool$s5_kk <- recode(ch_pool$s5,"0=NA;1=0;2=1;3=2;4=3;5:hi=4")
#recode s6 variables
ch_pool[,namy[grep("s6",namy)]] <- apply(ch_pool[,namy[grep("s6",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1"))
#recode s7
ch_pool$s7 <- recode(ch_pool$s7,"0=NA;1=0;2=1")
#recode s8
ch_pool$s8 <- recode(ch_pool$s8,"0=NA;1=0;2=1")
#recode s9_kk
ch_pool$s9_kk <- recode(ch_pool$s9,"0=NA;1=0;2=1;3:6=2;7=3")
#recode s10
ch_pool$s10  <-  recode(ch_pool$s10,"0=NA;1=0;2:3=1;4=2;5=3")
#recode s12_kk (12=0) (1 thru 2 =1) (3 thru 4= 2) (5 thru 6=3) (7 thru 8=4) (9 thru 11=5) (else=sysmis)
ch_pool$s12_kk  <-  recode(ch_pool$s12,"0=NA;1=1;2:3=2;4:6=3;7:9=4;10=5;11=0")
#recode s13_kk (1 thru 2 =0) (3 thru 4= 1) (5 thru 6=2) (7 thru 8=3) (9 thru 11=4) (else =sysmis)
ch_pool$s13_kk  <-  recode(ch_pool$s13,"0=NA;1=0;2:4=1;5:8=2;9:12=3;13=4")
##recoding the cm variables
mapply(tableu,ch_pool[,namy[grep("cm3",namy)]])
##cm1
ch_pool[,namy[grep("cm1",namy)]]  <-  apply(ch_pool[,namy[grep("cm1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
tableu(ch_pool$cm2)
tableu(ch_pool$cm2)
ch_pool$cm2  <-  recode(ch_pool$cm2,"0=NA;1:2=0;3:4=1")
tableu(ch_pool$cm2)
umcode  <-  function(x) {
recodes  <-  function(y) recode(y,"0=NA;1:2=0;3:4=1")  ##recode using this coding
if(length(unique(x)) < 2) {    ##if not empty set
x  <-  NULL
} else {
x  <-  recodes(x)
}
x
}
ch_pool[,namy[grep("cm3",namy)]]  <-  apply(ch_pool[,namy[grep("cm3",namy)]],2,function(z) umcode(z))
mapply(tableu,ch_pool[,namy[grep("cm3",namy)]])
namy  <-  names(ch_pool)
ch_pool <- ch_pool[,order(namy)]
ch_pool <- ch_pool[,orderdesc((namy))]
ch_pool <- ch_pool[,order(desc(namy))]
names(ch_pool)
library(plyr)
ch_pool <- ch_pool[,order(desc(namy))]
names(ch_pool)
ch_pool <- ch_pool[,order(namy)]
names(ch_pool)
ch_pool  <-  read.delim("//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/intermediate samples/ch_pool_filtered.csv",header=T,sep="\t",check.names=F)
namy <- names(ch_pool)
tableu <- function(x){
table(x,useNA="ifany")
}
mapply(tableu,ch_pool[6:88])
require(car)
ch_pool$k1_11 <- recode(ch_pool$k1_11,"0=NA;1=0;2=1")
ch_pool$k2_24 <- recode(ch_pool$k2_24,"1=0;2=1")
ch_pool$k2_25 <- recode(ch_pool$k2_25,"1=0;2=1")
#recoding the p1 variables
ch_pool[,namy[grep("p1",namy)]] <- apply(ch_pool[,namy[grep("p1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p2 variables
ch_pool[,namy[grep("p2",namy)]] <- apply(ch_pool[,namy[grep("p2",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
#recoding the p3 variables
ch_pool[,namy[grep("p3",namy)]] <- apply(ch_pool[,namy[grep("p3",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding the p4 variables
ch_pool[,namy[grep("p4",namy)]] <- apply(ch_pool[,namy[grep("p4",namy)]],2,function(x) recode(x,"0=NA;1:2=0;3:4=1"))
#recoding s3
ch_pool$s3  <-  recode(ch_pool$s3,"0=NA;1=0;2=1")
#recode s4n to s4n_kk
ch_pool$s4n_kk <- recode(ch_pool$s4n,"14:19=0;20:29=1;30:39=2;40:49=3;50:59=4;60:98=5")
#recode s4n to s4n_kkv
ch_pool$s4n_kkv <- recode(ch_pool$s4n,"14:17=0;18:19=1;19:hi=NA")
#recode s5
ch_pool$s5_kk <- recode(ch_pool$s5,"0=NA;1=0;2=1;3=2;4=3;5:hi=4")
#recode s6 variables
ch_pool[,namy[grep("s6",namy)]] <- apply(ch_pool[,namy[grep("s6",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1"))
#recode s7
ch_pool$s7 <- recode(ch_pool$s7,"0=NA;1=0;2=1")
#recode s8
ch_pool$s8 <- recode(ch_pool$s8,"0=NA;1=0;2=1")
#recode s9_kk
ch_pool$s9_kk <- recode(ch_pool$s9,"0=NA;1=0;2=1;3:6=2;7=3")
#recode s10
ch_pool$s10  <-  recode(ch_pool$s10,"0=NA;1=0;2:3=1;4=2;5=3")
#recode s12_kk (12=0) (1 thru 2 =1) (3 thru 4= 2) (5 thru 6=3) (7 thru 8=4) (9 thru 11=5) (else=sysmis)
ch_pool$s12_kk  <-  recode(ch_pool$s12,"0=NA;1=1;2:3=2;4:6=3;7:9=4;10=5;11=0")
#recode s13_kk (1 thru 2 =0) (3 thru 4= 1) (5 thru 6=2) (7 thru 8=3) (9 thru 11=4) (else =sysmis)
ch_pool$s13_kk  <-  recode(ch_pool$s13,"0=NA;1=0;2:4=1;5:8=2;9:12=3;13=4")
##recoding the cm variables
mapply(tableu,ch_pool[,namy[grep("cm3",namy)]])
##cm1
ch_pool[,namy[grep("cm1",namy)]]  <-  apply(ch_pool[,namy[grep("cm1",namy)]],2,function(x) recode(x,"0=NA;1=0;2=1;3=2;4=3"))
##cm2
ch_pool$cm2  <-  recode(ch_pool$cm2,"0=NA;1:2=0;3:4=1")
##removing the empty cm3 variables
#recoding function
umcode  <-  function(x) {
recodes  <-  function(y) recode(y,"0=NA;1:2=0;3:4=1")  ##recode using this coding
if(length(unique(x)) < 2) {    ##if not empty set
x  <-  NULL
} else {
x  <-  recodes(x)
}
x
}
ch_pool[,namy[grep("cm3",namy)]]  <-  apply(ch_pool[,namy[grep("cm3",namy)]],2,function(z) umcode(z))
mapply(tableu,ch_pool[6:88])
namy  <-  names(ch_pool)
ch_pool <- ch_pool[,order(namy)]
names(ch_pool)
ch_pool_young  <-  ch_pool[!is.na(ch_pool$s4n_kkv),]
write.table(ch_pool,file="//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/intermediate samples/ch_pool_coded.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
write.table(ch_pool_young,file="//filer001.office.nugg.ad/Data/Statistik/model/_CH/ch_pool/ch_pool_s4n_kkv.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
write.table(ch_pool_young,file="//filer001.office.nugg.ad/Data/Statistik/model/_CH/_Pool/sample/20140404/ch_pool_s4n_kkv.csv",sep="\t",row.names=F,col.names=T,quote=F,na="")
Sys.which("git")
Sys.which("git")
Sys.which("git")
Sys.which("git")
library(slidify)
setwd("//filer001.office.nugg.ad/sgarg/R Presentations/")
author('basics')
slidify('index.Rmd')
publish(title = 'R Basics', 'index.html', host = 'github')
publish(user ="sunandagarg",repo="basics_")
publish(user ="sunandagarg",repo="basics_")
publish(user ="sunandagarg",repo="basics_")
Sys.which("git")
Sys.which("git")
system('git config --global -list')
setwd("//filer001.office.nugg.ad/Data/Statistik/RPTN/Learning/R/Lerngruppe")
"//filer001.office.nugg.ad/sgarg/R Presentations/"
setwd("//filer001.office.nugg.ad/sgarg/R Presentations/")
setwd("//filer001.office.nugg.ad/Data/Statistik/RPTN/Learning/R/Lerngruppe")
read.table("data_s.csv",sep="\t",header=T)
my_data <- read.table("data_s.csv",sep="\t",header=T)
View(my_data)
setwd("//filer001.office.nugg.ad/sgarg/R Presentations/")
?read.tabel
?read.table
View(my_data)
my_vector <- c("blue","green","yellow")
my_vector[2]
named_vec <- c(color="green",type="light")
named_vec["color"]
names(named_vec)
named_vec["color"]
num_vec <- c(1:10,20:18)
num_vec
num_vec <- c(1:10,20:35) ##numeric vector
num_vec[num_vec > 15]
num_vec[num_vec < 15 | num_vec >30]
my_data[1,3]
my_data[5,3]
##5th row, & 2 column
my_data[5,3]
View(my_data)
my_data[5,5]
my_data[5,4]
my_data[4,5]
my_data[4,5]
subset(my_data, s3 > 20)
names(my_data)
new_data <- subset(my_data, s4n > 20)
View(new_data)
rm(list=ls())
publish(title = "R Again",'index.html',host="rpubs")
publish(title = 'R Again','index.html',host='rpubs')
setwd("//filer001.office.nugg.ad/sgarg/R Presentations/")
publish(title = 'R Again','index.html',host='rpubs')
author('basics')
publish(title = 'R Again','index.html',host='rpubs')
publish(title = 'R Again','index.html',host='rpubs')
896712678%16%
896712678%%16
